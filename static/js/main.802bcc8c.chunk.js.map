{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","quote","hexa","getQuote","bind","randomizer","Math","floor","random","fetch","then","response","json","data","setState","quotes","toString","this","color","bgColor","backgroundColor","className","style","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","author","href","target","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QA2DeA,G,wDAvDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CAAEC,MAAO,GAAKC,KAAM,IACjC,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAJC,E,uDAOP,IAAD,OAELC,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAEjCC,MAHY,0IAGDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAClCF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZb,MAAOY,EAAKE,OAAOV,GACnBH,KAAM,IAAMI,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBQ,SAAS,W,0CAM9DC,KAAKd,a,+BAIL,IAAMe,EAAQ,CAACA,MAAOD,KAAKjB,MAAME,MAC3BiB,EAAU,CAACC,gBAAgBH,KAAKjB,MAAME,MAC5C,OACE,qBAAKmB,UAAU,cAAcC,MAAOH,EAApC,SACE,sBAAKE,UAAU,YAAf,UACE,+CACA,sBAAKA,UAAU,WAAf,UACE,qBAAIA,UAAU,WAAWC,MAAOJ,EAAhC,UACE,qBAAKK,cAAY,OAAOC,UAAU,QAAQC,cAAY,MAAMC,YAAU,aAAaL,UAAU,YAAYM,KAAK,MAAMC,MAAM,6BAA6BC,QAAQ,cAA/J,SACE,sBAAMC,KAAK,eAAeC,EAAE,0XAE7Bd,KAAKjB,MAAMC,MAAMA,SACpB,oBAAIoB,UAAU,WAAWC,MAAOJ,EAAhC,SAAwCD,KAAKjB,MAAMC,MAAM+B,YAE3D,sBAAKX,UAAU,UAAf,UACE,mBAAGA,UAAU,MAAMY,KAAK,4BAA4BC,OAAO,OAA3D,SACE,qBAAKZ,MAAOJ,EAAOG,UAAU,uBAAuBE,cAAY,OAAOC,UAAU,QAAQC,cAAY,MAAMC,YAAU,iBAAiBC,KAAK,MAAMC,MAAM,6BAA6BC,QAAQ,cAA5L,SACE,sBAAMC,KAAK,eAAeC,EAAE,wlBAGhC,wBAAQT,MAAOH,EAASE,UAAU,cAAcc,QAASlB,KAAKd,SAA9D,oC,GA9CMiC,IAAMC,YCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.802bcc8c.chunk.js","sourcesContent":["import './App.css';\nimport React from \"react\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { quote: [] , hexa: ''};\n    this.getQuote = this.getQuote.bind(this);\n  }\n\n  getQuote() {\n    const url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n    let randomizer = Math.floor(Math.random() * 100);\n\n    fetch(url).then(response => response.json())\n      .then(data => {\n        this.setState({ \n          quote: data.quotes[randomizer], \n          hexa: '#' + Math.floor(Math.random()*16777215).toString(16)\n        });\n      })\n  }\n\n  componentDidMount() {\n    this.getQuote()\n  }\n\n  render() {\n    const color = {color: this.state.hexa};\n    const bgColor = {backgroundColor:this.state.hexa};\n    return (\n      <div className=\"App animaBG\" style={bgColor}>\n        <div className='container'>\n          <h1 >Quote Machine</h1>\n          <div className='quoteBox' >\n            <h2 className='animaCol' style={color}>\n              <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"quote-left\" className=\"quote-svg\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path fill=\"currentColor\" d=\"M464 256h-80v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8c-88.4 0-160 71.6-160 160v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48zm-288 0H96v-64c0-35.3 28.7-64 64-64h8c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24h-8C71.6 32 0 103.6 0 192v240c0 26.5 21.5 48 48 48h128c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z\"></path>\n              </svg>\n              {this.state.quote.quote}</h2>\n            <h3 className='animaCol' style={color}>{this.state.quote.author}</h3>\n          </div>\n          <div className='buttons'>\n            <a className='btn' href=\"https://twitter.com/share\" target='_new' >\n              <svg style={color} className='twitter-svg animaCol' aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"twitter-square\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                <path fill=\"currentColor\" d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-48.9 158.8c.2 2.8.2 5.7.2 8.5 0 86.7-66 186.6-186.6 186.6-37.2 0-71.7-10.8-100.7-29.4 5.3.6 10.4.8 15.8.8 30.7 0 58.9-10.4 81.4-28-28.8-.6-53-19.5-61.3-45.5 10.1 1.5 19.2 1.5 29.6-1.2-30-6.1-52.5-32.5-52.5-64.4v-.8c8.7 4.9 18.9 7.9 29.6 8.3a65.447 65.447 0 0 1-29.2-54.6c0-12.2 3.2-23.4 8.9-33.1 32.3 39.8 80.8 65.8 135.2 68.6-9.3-44.5 24-80.6 64-80.6 18.9 0 35.9 7.9 47.9 20.7 14.8-2.8 29-8.3 41.6-15.8-4.9 15.2-15.2 28-28.8 36.1 13.2-1.4 26-5.1 37.8-10.2-8.9 13.1-20.1 24.7-32.9 34z\"></path>\n              </svg>\n            </a>\n            <button style={bgColor} className='btn animaBG' onClick={this.getQuote}>Next Quote</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}